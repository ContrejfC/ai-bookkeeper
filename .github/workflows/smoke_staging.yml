name: Staging Smoke Test

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"  # Every 6 hours

jobs:
  smoke:
    runs-on: ubuntu-latest
    
    env:
      BASE_URL: ${{ secrets.STAGING_BASE_URL }}
    
    steps:
      - name: Check BASE_URL is set
        run: |
          if [ -z "${BASE_URL}" ]; then
            echo "❌ STAGING_BASE_URL secret is not set."
            echo "Set it in: GitHub repo → Settings → Secrets → Actions"
            exit 1
          fi
          echo "✅ STAGING_BASE_URL configured: ${BASE_URL}"
      
      - name: Create artifacts directory
        run: mkdir -p artifacts/staging-smoke
      
      - name: Curl /healthz
        run: |
          set -euo pipefail
          echo "🏥 Testing /healthz endpoint..."
          curl -fsS "${BASE_URL}/healthz" -o artifacts/staging-smoke/staging-healthz.json
          echo "✅ /healthz returned 200 OK"
          cat artifacts/staging-smoke/staging-healthz.json
      
      - name: Curl /readyz
        run: |
          set -euo pipefail
          echo "🚦 Testing /readyz endpoint..."
          curl -fsS "${BASE_URL}/readyz" -o artifacts/staging-smoke/staging-readyz.json
          echo "✅ /readyz returned 200 OK"
          cat artifacts/staging-smoke/staging-readyz.json
      
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      
      - name: Validate JSON structure
        run: |
          set -euo pipefail
          echo "🔍 Validating JSON responses..."
          
          # Check files exist and are non-empty
          test -s artifacts/staging-smoke/staging-healthz.json || {
            echo "❌ staging-healthz.json is empty"
            exit 1
          }
          
          test -s artifacts/staging-smoke/staging-readyz.json || {
            echo "❌ staging-readyz.json is empty"
            exit 1
          }
          
          # Validate JSON format
          jq -e 'type=="object"' artifacts/staging-smoke/staging-healthz.json > /dev/null || {
            echo "❌ staging-healthz.json is not valid JSON object"
            exit 1
          }
          
          jq -e 'type=="object"' artifacts/staging-smoke/staging-readyz.json > /dev/null || {
            echo "❌ staging-readyz.json is not valid JSON object"
            exit 1
          }
          
          # Validate healthz schema
          jq -e '.status' artifacts/staging-smoke/staging-healthz.json > /dev/null || {
            echo "❌ healthz missing 'status' field"
            exit 1
          }
          
          jq -e '.database_status' artifacts/staging-smoke/staging-healthz.json > /dev/null || {
            echo "⚠️  healthz missing 'database_status' field (optional)"
          }
          
          # Validate readyz schema
          jq -e '.status' artifacts/staging-smoke/staging-readyz.json > /dev/null || {
            echo "❌ readyz missing 'status' field"
            exit 1
          }
          
          jq -e '.checks' artifacts/staging-smoke/staging-readyz.json > /dev/null || {
            echo "⚠️  readyz missing 'checks' field (optional)"
          }
          
          # Check for migration/database info
          jq -e '.checks.migrations // .checks.database // .current_migration // .alembic_version' \
            artifacts/staging-smoke/staging-readyz.json > /dev/null || {
            echo "⚠️  readyz missing migration info (non-fatal)"
          }
          
          echo "✅ JSON validation passed"
      
      - name: Display results summary
        if: always()
        run: |
          echo ""
          echo "=== Smoke Test Summary ==="
          echo ""
          echo "📊 /healthz Response:"
          jq . artifacts/staging-smoke/staging-healthz.json 2>/dev/null || cat artifacts/staging-smoke/staging-healthz.json
          echo ""
          echo "📊 /readyz Response:"
          jq . artifacts/staging-smoke/staging-readyz.json 2>/dev/null || cat artifacts/staging-smoke/staging-readyz.json
          echo ""
          echo "=== End Summary ==="
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: staging-smoke
          path: artifacts/staging-smoke/*
          retention-days: 30
      
      - name: Set summary with badges
        if: always()
        run: |
          # Determine status
          HEALTHZ_STATUS="unknown"
          READYZ_STATUS="unknown"
          
          if [ -f artifacts/staging-smoke/staging-healthz.json ]; then
            HEALTHZ_STATUS=$(jq -r '.status // "unknown"' artifacts/staging-smoke/staging-healthz.json)
          fi
          
          if [ -f artifacts/staging-smoke/staging-readyz.json ]; then
            READYZ_STATUS=$(jq -r '.status // "unknown"' artifacts/staging-smoke/staging-readyz.json)
          fi
          
          # Create badges
          if [ "$HEALTHZ_STATUS" = "ok" ]; then
            HEALTHZ_BADGE="![](https://img.shields.io/badge/healthz-✅%20ok-green)"
          else
            HEALTHZ_BADGE="![](https://img.shields.io/badge/healthz-❌%20${HEALTHZ_STATUS}-red)"
          fi
          
          if [ "$READYZ_STATUS" = "ready" ] || [ "$READYZ_STATUS" = "ok" ]; then
            READYZ_BADGE="![](https://img.shields.io/badge/readyz-✅%20${READYZ_STATUS}-green)"
          else
            READYZ_BADGE="![](https://img.shields.io/badge/readyz-❌%20${READYZ_STATUS}-red)"
          fi
          
          # Write summary
          echo "# 🏥 Staging Smoke Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "$HEALTHZ_BADGE $READYZ_BADGE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Base URL:** ${BASE_URL}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f artifacts/staging-smoke/staging-healthz.json ]; then
            echo "### `/healthz` Response" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat artifacts/staging-smoke/staging-healthz.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f artifacts/staging-smoke/staging-readyz.json ]; then
            echo "### `/readyz` Response" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat artifacts/staging-smoke/staging-readyz.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Send Slack alert on failure
        if: failure() && secrets.SLACK_WEBHOOK_URL != ''
        run: |
          # Collect failure details
          HEALTHZ_STATUS=$(jq -r '.status // "unavailable"' artifacts/staging-smoke/staging-healthz.json 2>/dev/null || echo "unavailable")
          READYZ_STATUS=$(jq -r '.status // "unavailable"' artifacts/staging-smoke/staging-readyz.json 2>/dev/null || echo "unavailable")
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Create Slack payload
          cat > slack-payload.json <<EOF
          {
            "text": "🚨 Staging Smoke Test Failed",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "🚨 Staging Smoke Test Failed"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Service:* AI Bookkeeper Staging"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Environment:* ${BASE_URL}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Healthz:* ${HEALTHZ_STATUS}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Readyz:* ${READYZ_STATUS}"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "💡 *Quick Tips:*\n• Check Render logs: Dashboard → ai-bookkeeper-web → Logs\n• Verify worker: Dashboard → ai-bookkeeper-worker → Logs\n• Database issues: Check Render DB status\n• Recent deploy: May be a cold start (wait 60s)"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Run Logs"
                    },
                    "url": "${RUN_URL}",
                    "style": "danger"
                  },
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "Render Dashboard"
                    },
                    "url": "https://dashboard.render.com"
                  }
                ]
              }
            ]
          }
          EOF
          
          # Send to Slack
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d @slack-payload.json \
            || echo "⚠️  Slack webhook failed (non-fatal)"
      
      - name: Send email alert on failure
        if: failure() && secrets.ALERT_EMAIL != ''
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST || 'smtp.gmail.com' }}
          server_port: ${{ secrets.SMTP_PORT || '587' }}
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "🚨 AI Bookkeeper Staging: Smoke Test Failed"
          to: ${{ secrets.ALERT_EMAIL }}
          from: "AI Bookkeeper Alerts <noreply@ai-bookkeeper.dev>"
          body: |
            Staging smoke test failed at ${{ env.BASE_URL }}
            
            Status:
            - /healthz: Check failed
            - /readyz: Check failed
            
            View logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Check Render Dashboard:
            - Web service logs
            - Worker service logs
            - Database status
          ignore_errors: true
        continue-on-error: true

