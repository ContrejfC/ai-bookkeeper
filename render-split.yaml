# ============================================================================
# AI Bookkeeper - Render Blueprint (Split Services)
# ============================================================================
# Two-service architecture: API (Python) + Web (Next.js)
# Clean separation, independent scaling, simpler deploys
# ============================================================================

services:
  # ==========================================================================
  # API Service (FastAPI + PostgreSQL)
  # ==========================================================================
  - type: web
    name: ai-bookkeeper-api
    runtime: docker
    dockerfilePath: ./Dockerfile.api
    region: oregon
    plan: starter
    branch: main
    healthCheckPath: /healthz
    
    envVars:
      # Core
      - key: ENV
        value: production
      - key: BASE_URL
        value: https://api.ai-bookkeeper.app
      - key: PUBLIC_BASE_URL
        value: https://api.ai-bookkeeper.app
      - key: LOG_LEVEL
        value: INFO
      - key: CORS_ALLOWED_ORIGINS
        value: https://app.ai-bookkeeper.app,https://ai-bookkeeper.app,https://ai-bookkeeper-web.onrender.com
      
      # Secrets (set in Render Dashboard - not committed)
      - key: JWT_SECRET
        sync: false
      - key: CSRF_SECRET
        sync: false
      
      # Database (auto-provided by Render when PostgreSQL linked)
      - key: DATABASE_URL
        fromDatabase:
          name: ai-bookkeeper-db
          property: connectionString
      
      # Stripe (set in Dashboard)
      - key: STRIPE_SECRET_KEY
        sync: false
      - key: STRIPE_PUBLISHABLE_KEY
        sync: false
      - key: STRIPE_WEBHOOK_SECRET
        sync: false
      - key: STRIPE_PRICE_STARTER
        sync: false
      - key: STRIPE_PRICE_PRO
        sync: false
      - key: STRIPE_PRICE_FIRM
        sync: false
      
      # QuickBooks (set in Dashboard)
      - key: QBO_CLIENT_ID
        sync: false
      - key: QBO_CLIENT_SECRET
        sync: false
      - key: QBO_REDIRECT_URI
        value: https://api.ai-bookkeeper.app/api/auth/qbo/callback
      - key: QBO_SCOPES
        value: com.intuit.quickbooks.accounting
      - key: QBO_BASE
        value: https://sandbox-quickbooks.api.intuit.com
      - key: QBO_ENVIRONMENT
        value: sandbox
      
      # Billing & Limits
      - key: FREE_PROPOSE_CAP_DAILY
        value: 50
      - key: AUTOPOST
        value: false
      
      # Privacy
      - key: ENABLE_LABELS
        value: true
      - key: LABEL_SALT_ROUNDS
        value: 12
      
      # Monitoring (optional)
      - key: SENTRY_DSN
        sync: false

  # ==========================================================================
  # Web Service (Next.js Frontend)
  # ==========================================================================
  - type: web
    name: ai-bookkeeper-web
    runtime: docker
    dockerfilePath: ./Dockerfile.web
    region: oregon
    plan: starter
    branch: main
    
    envVars:
      # ⚠️ IMPORTANT: NEXT_PUBLIC_* vars must be available at BUILD TIME
      # Render: Mark these as "Available during build" in Dashboard
      
      # Next.js API proxy target (internal communication)
      - key: NEXT_PUBLIC_API_URL
        value: https://api.ai-bookkeeper.app
        # In Render Dashboard: Check "Available during build"
      
      # Public-facing variables
      - key: NEXT_PUBLIC_BASE_URL
        value: https://app.ai-bookkeeper.app
        # In Render Dashboard: Check "Available during build"

  # ==========================================================================
  # PostgreSQL Database
  # ==========================================================================
databases:
  - name: ai-bookkeeper-db
    databaseName: ai_bookkeeper
    region: oregon
    plan: starter
    ipAllowList: []

# ============================================================================
# DEPLOYMENT NOTES
# ============================================================================
#
# Two-Service Architecture:
# - ai-bookkeeper-api: Python FastAPI backend (port 8000 internally, $PORT externally)
# - ai-bookkeeper-web: Next.js frontend (port 3000 internally, $PORT externally)
# - ai-bookkeeper-db: PostgreSQL database (shared by API service)
#
# Benefits:
# - Clean separation of concerns
# - Independent scaling (scale API vs Web separately)
# - Simpler builds (no multi-stage complexity)
# - Better caching (fewer layers to rebuild)
# - Easier debugging (clear service boundaries)
#
# Internal Communication:
# - Web proxies /api/* to API service via NEXT_PUBLIC_API_URL
# - API serves at https://ai-bookkeeper-api.onrender.com
# - Web serves at https://ai-bookkeeper-web.onrender.com (or custom domain)
#
# Health Checks:
# - API: /healthz (database connectivity check)
# - Web: /api/health or / (Next.js serves 200 on /)
#
# Secrets Management:
# - JWT_SECRET, CSRF_SECRET: Generate with: openssl rand -hex 32
# - Stripe keys: From Stripe Dashboard (TEST or LIVE)
# - QBO credentials: From developer.intuit.com
# - Set all secrets in Render Dashboard (sync: false means not in git)
#
# Custom Domain (Optional):
# - Add custom domain to ai-bookkeeper-web service
# - Update BASE_URL, PUBLIC_BASE_URL, QBO_REDIRECT_URI
# - Update Stripe webhook URL
#
# ============================================================================

